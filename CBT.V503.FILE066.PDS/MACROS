./ ADD NAME=#SORT    0100-03278-03278-0044-00169-00169-00000-AFIELD
         MACRO
&NAME    #SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=
         MNOTE *,'       #SORT     VERSION 002    12 MAR 87        ACF'
.**********************************************************************
.*                                                                    *
.* #SORT                                                              *
.*                                                                    *
.* FUNCTION       GENERATE CODING TO SORT A TABLE IN ASCENDING OR     *
.*                DESCENDING ORDER BASED ON A KEY FIELD IN EACH       *
.*                ENTRY.                                              *
.*                                                                    *
.* DESCRIPTION    A BUBBLE SORT IS SORT IS PERFORMED.  THE KEYS       *
.*                OF CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS       *
.*                ARE SWITCHED IF NECESSARY.  PROCESSING PROCEEDS     *
.*                TO THE NEXT PAIR OF ENTRIES.  AT THE END OF ONE     *
.*                PASS, AT LEAST THE HIGHEST KEY IS IN THE PROPER     *
.*                POSITION.  THE LIST IS REDUCED TO A SUBLIST         *
.*                FROM THE FIRST ENTRY TO THE LAST ENTRY WHICH        *
.*                WAS SWITCHED AND THE SUBLIST IS THEN PROCESSED      *
.*                AS WAS THE ORIGINAL LIST.  THIS CONTINUES UNTIL     *
.*                THE ENTIRE LIST HAS BEEN SORTED.  IF AT ANY POINT,  *
.*                PROCESSING THE LIST RESULTS IN NO ENTRIES BEING     *
.*                SWITCHED, THE LIST IS IN ORDER AND PROCESSING       *
.*                IS TERMINATED.                                      *
.*                                                                    *
.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          *
.*                SORT AND MUST NOT BE SPECIFIED AS FIRST OR          *
.*                LAST VALUES.                                        *
.*                                                                    *
.*                REGISETR 2 IS ALSO USED IF FORMAT BI IS SELECTED.   *
.*                                                                    *
.* SYNTAX         NAME     #SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),    *
.*                               FIRST=SYMBOL1,                       *
.*                               LAST=SYMBOL2,                        *
.*                               LENGTH=NUM                           *
.*                                                                    *
.*                NAME   - SPECIFIES THE SYMBOLIC TAG TO BE           *
.*                         ASSIGNED TO THE FIRST INSTRUCTION          *
.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      *
.*                                                                    *
.*                FIELDS - SPECIFIES THE SORT PARAMETERS.             *
.*                         KEYPOS - SPECIFIES THE RELATIVE KEY        *
.*                                  POSITION IN THE RECORD.           *
.*                         KEYLEN - SPECIFIES THE LENGTH OF THE KEY.  *
.*                         FMT    - SPECIFIES THE FORMAT OF THE       *
.*                                  DATA TO BE SORTED.                *
.*                                  VALID FORMATS ARE CHARACTER (CH)  *
.*                                  OR BINARY (BI).                   *
.*                         ORDER  - SPECIFIES IF THE LIST IS TO BE    *
.*                                  SORTED IN ASCENDING ORDER (A),    *
.*                                  OR DESCENDING ORDER (D).  THE     *
.*                                  DEFAULT IS A.                     *
.*                                                                    *
.*                FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST   *
.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *
.*                         CONTAINS THE ADDRESS OF THE FIRST ENTRY.   *
.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *
.*                         BE ADDRESSABLE.  IF A REGISTER IS          *
.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *
.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *
.*                                                                    *
.*                LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST    *
.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *
.*                         CONTAINS THE ADDRESS OF THE LAST ENTRY.    *
.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *
.*                         BE ADDRESSABLE.  IF A REGISTER IS          *
.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *
.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *
.*                                                                    *
.*                LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN     *
.*                         THE TABLE.  THIS PARAMETER IS REQUIRED.    *
.*                                                                    *
.*                                                                    *
.* ERRORS         INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8   *
.*                FORMAT TYPE NOT SUPPORTED                     - 8   *
.*                FIRST VALUE NOT SPECIFIED                     - 8   *
.*                LAST  VALUE NOT SPECIFIED                     - 8   *
.*                LENGTH VALUE NOT SPECIFIED                    - 8   *
.*                                                                    *
.* EXAMPLE        SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES     *
.*                ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50       *
.*                BYTES.                                              *
.*                                                                    *
.*                         #SORT FIELDS=(1,8,CH,A),LENGTH=50,         *
.*                               FIRST=BEGIN,LAST=END                 *
.*                                                                    *
.*                BEGIN    DC    CL8'A',CL42'ENTRY 1'                 *
.*                         DC    CL8'D',CL42'ENTRY 2'                 *
.*                         DC    CL8'X',CL42'ENTRY 3'                 *
.*                         DC    CL8'$',CL42'ENTRY 4'                 *
.*                         DC    CL8'Q',CL42'ENTRY 5'                 *
.*                END      DC    CL8'M',CL42'ENTRY 6'                 *
.*                                                                    *
.* GLOBALS                                                            *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.* MACROS USED                                                        *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &X,&Y,&Z
         LCLC  &HI,&I,&LEN
.*
&I       SETC  '#SOR'.'&SYSNDX'(2,3)
&X       SETA  N'&FIELDS
         AIF   (&X NE 4).ERR1
         AIF   ('&FIELDS(3)' EQ 'CH').OK1
         AIF   ('&FIELDS(3)' NE 'BI').ERR2
.OK1     ANOP
&HI      SETC  'H'
         AIF   ('&FIELDS(&X)' NE 'D').TESTA
&HI      SETC  'L'
         AGO   .SETREGS
.TESTA   AIF   ('&FIELDS(&X)' EQ 'A').SETREGS
         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'
.SETREGS ANOP
&LEN     SETC  '&LENGTH'
&X       SETA  &FIELDS(1)-1            OFFSET WITHIN RECORD
&Y       SETA  &FIELDS(2)              LENGTH OF SORT-KEY
.*&Z       SETA  &X+&LEN                 OFFSET WITHIN NEXT RECORD
         AIF   ('&FIRST'  EQ '').ERR3
         AIF   ('&LAST'   EQ '').ERR4
         AIF   ('&LENGTH' EQ '').ERR5
.*
&NAME    LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY
         AIF   ('&LAST'(1,1) EQ '(').RFORM1
         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS
         AGO   .CONT1
.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS
.CONT1   ANOP
&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS
         AIF   ('&FIRST'(1,1) EQ '(').RFORM2
         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS
         AGO   .CONT2
.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS
.CONT2   SR    R1,R0                   POINT TO PENULTIMATE
         CR    R15,R1                  TEST AGAINST FIRST ENTRY
         BH    &I.D                    IF HIGH, LIST SORTED
&I.B     EQU   *
         AIF   ('&FIELDS(3)' EQ 'BI').BI1
         CLC   &X.(&Y,R15),&X.+&LEN.(R15)    COMPARE KEYS
         AGO   .SRTX
.BI1     ANOP
         ICM   R2,B'1111',&X.+1(R15)   LOAD VALUE INTO REG
         C     R2,&X.+1+&LEN.(R15)     COMPARE KEYS
.SRTX    ANOP
         BN&HI &I.C
         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES
         XC    &LEN.(&LEN,R15),0(R15)
         XC    0(&LEN,R15),&LEN.(R15)
         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY
&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY
         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR
         BNZ   &I.A
&I.D     EQU   *
         MEXIT
.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'
         MEXIT
.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'
         MEXIT
.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'
         MEXIT
.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'
         MEND
./ ADD NAME=@AMODE   0100-87306-87306-1804-00073-00073-00000-NASPA
         MACRO
&NAME    @AMODE &MODE
.*---------------------------------------------------------------------
.*
.*       CHANGE ADDRESS MODE
.*
.*       @AMODE 24                SET ADDR MODE TO 24 BIT
.*       @AMODE 31                SET ADDR MODE TO 31 BIT
.*
.*---------------------------------------------------------------------
         LCLA  &X
&X       SETA  &SYSNDX
&NAME    DS    0H
         AIF   ('&MODE' EQ '24').A24
         AIF   ('&MODE' EQ '31').A31
         MNOTE 8,'INVALID MODE, MUST BE 24 OR 31'
         MEXIT
.A24     ANOP
*----------------------------------------------------------------------
*        SET AMODE=24
*----------------------------------------------------------------------
         ICM   R1,15,=A(MZZZ&X)
         BSM   R0,R1              SET AMODE=24
         AGO   .DONE
.A31     ANOP
*----------------------------------------------------------------------
*        SET AMODE=31
*----------------------------------------------------------------------
         ICM   R1,15,=A(MZZZ&X+X'80000000')
         BSM   R0,R1              SET AMODE=31
.DONE    ANOP
MZZZ&X   DS    0H
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
.*
.*       FREEWARE: THIS MACRO IS DISTRIBUTED ON AN AS-IS BASIS
.*                 WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:
.*
.*                 THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)
.*                 P.O. BOX 21525
.*                 GREENFIELD, WI 53221
.*
.*
.*       MACRO WRITTEN BY:
.*
.*                 PRODUCTIVITY SYSTEMS, INC.
.*                 MILWAUKEE, WI
.*
.*---------------------------------------------------------------------
.*
.*    THIS MACRO HAS MET A BASIC SET OF PROGRAMMING AND
.*    DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY
.*    FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL
.*    EVALUATION OF THE USE OF THIS MACRO IN THEIR ENVIRONMENT.
.*
.*    NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS
.*    FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,
.*    FUNCTION, RESULTS, OR PERFORMANCE OF THIS MACRO.
.*
.*    IMPLEMENTATION AND USE OF THIS MACRO CONSTITUTES A RELEASE
.*    FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF
.*    THIS MACRO AT THE USER'S INSTALLATION.
.*
.*    THIS MACRO IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.
.*    RECIPIENTS ARE FREE TO MAKE THIS MACRO AVAILABLE TO OTHERS IN
.*    LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY
.*    NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN
.*    INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE
.*    INTEGRATED INTO ANY PROGRAM FOR SUCH USE.
.*
.*---------------------------------------------------------------------
.*---------------------------------------------------------------------
         MEND
./ ADD NAME=IEZCTGFL 0100-87092-87092-0853-00020-00020-00000-FIELD
         MACRO
&NAME    IEZCTGFL
         DSECT
***********************************************************************
* DESCRIBES THE FIELD PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF   *
***********************************************************************
CTGFL    DS    0F
CTGFLDNO DC    X'00'
CTGFLDCD DC    X'00'
CTGFLDGC DC    X'00'
CTGFLDRE DC    X'00'
CTGFLDWA DC    F'0'
CTGFLDNM DC    F'0'
CTGFLCHN DC    F'0'
CTGFLDAT DC    2F'0'
         ORG   CTGFLDAT
CTGFLNG  DC    F'0'
CTGFLPT  DC    F'0'
LCTGFL   EQU   *-CTGFL
         MEND
./ ADD NAME=IEZCTGPL 0101-87092-87092-0853-00040-00061-00000-FIELD
         MACRO
&NAME    IEZCTGPL
         DSECT
***********************************************************************
* DESCRIBES THE CATALOG PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF *
***********************************************************************
CTGPL    DS    0F
CTGOPTN1 DC    X'00'
CTGBYPSS EQU   X'80'
CTGNAME  EQU   X'04'
CTGCNAME EQU   X'02'
CTGOPTN2 DC    X'00'
CTGGTALL EQU   X'40'
CTGOPTN3 DC    X'00'
CTGLOC   EQU   X'20'
CTGNUM   EQU   X'02'
CTGAM0   EQU   X'01'
CTGOPTN4 DC    X'00'
CTGBYPMT EQU   X'08'
CTGICFC  EQU   X'02'
CTGICFOR EQU   X'01'
CTGENT   DC    X'00',AL3(0)
CTGCAT   DC    F'0'
         ORG   CTGCAT
CTGVOL   DC    F'0'
CTGWKA   DC    F'0'
CTGDSORG DC    X'0000'
         ORG   CTGDSORG
CTGOPTNS DC    X'0000'
CTGLTCAT EQU   X'20'
CTGTYPE  DC    X'00'
CTGNOFLD DC    X'00'
CTGDDNM  DC    F'0'
         ORG   CTGDDNM
CTGFDBK  DC    X'0000'
CTGFBFLG DC    X'0000'
CTGJSCB  DC    F'0'
CTGFIELD DC    F'0'
LCTGPL   EQU   *-CTGPL
         MEND
./ ADD NAME=MOREND   0100-03278-03278-0044-00068-00068-00000-AFIELD
         MACRO
&NAME    MOREND &RENT=,&RC=0,&SP=,&SAVE=(0)
.* CHANGED BY RMF SO PARM CAN BE RETURNED IN R1
.* CHANGED BY ACF SO RETURN CODE CAN BE IN REG OR LITERAL 19 FEB 87
.* CHANGED BY ACF TO USE RU FORM OF FREEMAIN
         LCLC  &A,&B
         GBLC  &MOWSECT,&SUBP,&ARNAME
         GBLB  &NREN,&NSAR
         AIF   ('&SYSECT' EQ '&MOWSECT').CHKR
&MOWSECT CSECT
.CHKR    ANOP
&NAME    DS    0H
&NREN    SETB  (('&RENT' EQ 'NO') OR &NREN)
         AIF   (&NSAR).RETR
         AIF   (&NREN).NORENT
         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NOT1
         LR    14,1
         LR    1,13
         AGO   .L
.NOT1    ANOP
         LR    1,13
.L       L     13,4(1)
         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NS1
         ST    14,24(13)
.NS1     AIF   (('&SAVE(1)' NE '0') AND ('&SAVE(2)' NE '0')).NS2
         ST    0,20(13)
.* * * * * * * *
.NS2     AIF   ('&RC'(1,1) EQ '(').RCREG  IF IN RX FORM  ..
         AGO   .NS15
.RCREG   ANOP                             ELSE, IN A REG ..
         AIF   ('&RC' EQ '(15)').GOTRC    IF NOT REG 15..
         AIF   ('&RC' EQ '(R15)').GOTRC   IF NOT REG 15..
         LR    15,&RC                     LOAD R15 WITH CODE
.GOTRC   ANOP
.* * * * * * * *
         ST    15,16(13)
.NS15    ANOP
         AIF   ('&SUBP' NE '').N0
&SUBP    SETC  '0'
.N0      AIF   (T'&SP EQ 'O').FR1
&SUBP    SETC  '&SP'
.FR1     FREEMAIN RU,LV=MOWWORKL,A=(1),SP=&SUBP
         AIF   ('&RC' EQ '(15)').R15
         AIF   ('&RC' EQ '(R15)').R15
.* * * * * * * *
         AIF   ('&RC'(1,1) EQ '(').RCREG1 IF IN RX FORM  ..
         AGO   .NS15A
.RCREG1  ANOP                             ELSE, IN A REG ..
         LR    15,&RC                     LOAD R15 WITH CODE
         AGO   .R15
.NS15A   ANOP
.* * * * * * * *
         RETURN (14,12),T,RC=&RC
         AGO   .DUMM
.R15     ANOP
         RETURN (14,12),T
.DUMM    ANOP
MOWWORK  DSECT
MOWWORKL EQU   *-MOWWORK
&SYSECT  CSECT
         AGO   .LTORG
.NORENT  ANOP
         L     13,&ARNAME.+4
.RETR    L     14,12(13)
         RETURN (2,12),T,RC=&RC
.LTORG   LTORG
         DS    0H                 FORCE TO HALFWORD BOUNDARY
         MEND
./ ADD NAME=MOWSTART 0100-03278-03278-0044-00170-00170-00000-AFIELD
         MACRO
&NAME    MOWSTART &SAVE=(14,12),&T=,&IDENT=*,&BASE=12,&EQU=YES,&RENT=, *
               &R1=R1,&R2=R2,&R3=R3,&R4=R4,&R5=R5,&R6=R6,&RB=RB,       *
               &R7=R7,&R8=R8,&R9=R9,&R10=R10,&R11=R11,&R12=R12,        *
               &R13=R13,&R14=R14,&R15=R15,&R0=R0,&AREA=SAVEAREA,       *
               &SP=0,&SAREA=,&STOR=RES
.* CHANGED BY RMF SO PARM CAN BE PASSED IN R0
.* CHANGED BY ACF TO ADD STOR TO CONTROL WHERE GETMAIN OCCURS. USE RU
         GBLB  &NREN,&NSAR
         GBLC  &MOWSECT,&SUBP,&ARNAME,&RBASE
         LCLA  &WK
         LCLC  &A,&B,&TC
         LCLC  &R0L,&R1L,&R2L,&R3L,&R4L,&R5L,&R6L,&R7L,&R8L,&R9L,&R10L
         LCLC  &R11L,&R12L,&R13L,&R14L,&R15L
         AIF   ('&NAME' NE '').OK
         MNOTE 16,'THERE MUST BE AN ENTRY IN THE NAME FIELD'
         MEXIT
.OK      ANOP
&NREN    SETB  ('&RENT' EQ 'NO')
&NSAR    SETB  ('&SAREA' EQ 'NO')
&MOWSECT SETC  '&NAME'
&RBASE   SETC  '&RB'
&IDENTD  SETC  '&NAME._&SYSDATE._&SYSTIME'
&NAME    CSECT
         USING *,&BASE
&TC      SETC  '&T'
         AIF   ((&NREN) OR (&NSAR)).SAVO
&A       SETC  '&SAVE(1)'
         AIF   (N'&SAVE EQ 1).SAV1
         AIF   (N'&SAVE NE 2).SAVE
&B       SETC  '&SAVE(2)'
.SAV1    AIF   (&A GE 3).NOTALL
         AIF   ('&A' EQ '0').CHK1
         AIF   (N'&SAVE EQ 2).SET0
&B       SETC  '&A'
         AGO   .SET0
.CHK1    AIF   (N'&SAVE EQ 1).SET1
         AIF   ('&B' NE '0').SET0
.SET1    ANOP
&B       SETC  '1'
.SET0    ANOP
         AIF   ('&TC' EQ 'T').SET14
         SAVE  (0,&B),&TC,&IDENTD
         AGO   .SAVT
.SET14   SAVE  (14,&B),,&IDENTD
         AGO   .SAVT
.NOTALL  AIF   (&A GE 14).TEST2
         SAVE  (0,1),&TC,&IDENTD
         SAVE  &SAVE
         AGO   .SAVT
.TEST2   AIF   (N'&SAVE EQ 1).SB1
         AIF   ((&B GE 1) AND (&B LE 12)).SAVE
.SB1     ANOP
&B       SETC  '1'
.SAVE    AIF   ('&B' EQ '').SAVO
         SAVE  (&SAVE(1),&B),&TC,&IDENTD
         AGO   .SAVT
.SAVO    SAVE  &SAVE,&TC,&IDENTD
.SAVT    ANOP
         LR    &BASE,15
.*       B     *+4+16
.*       DC    CL16'&SYSDATE._&SYSTIME.'
         AIF   (&NSAR).CHKEQU
         AIF   ('&RENT' EQ 'NO').NORENT
&SUBP    SETC  '&SP'
         GETMAIN RU,LV=MOWWORKL,SP=&SUBP,LOC=&STOR
         ST    1,8(13)
         ST    13,4(1)
         LM    0,1,20(13)
         L     13,8(13)
         USING MOWWORK,13
MOWWORK  DSECT
         DS    18A
&NAME    CSECT
         AGO   .CHKEQU
.NORENT  ST    13,&AREA+4
         AIF   (&BASE EQ 3).SET4
&WK      SETA  3
         AGO   .LR
.SET4    ANOP
&WK      SETA  4
.LR      LR    &WK,13
         CNOP  0,4
         BAL   13,*+76
&ARNAME  SETC  '&AREA'
&ARNAME  DC    18F'0'
         ST    13,8(&WK)
.CHKEQU  AIF   ('&EQU' NE 'YES').NOEQU
&R0L     SETC  '&R0'(1,8)
&R1L     SETC  '&R1'(1,8)
&R2L     SETC  '&R2'(1,8)
&R3L     SETC  '&R3'(1,8)
&R4L     SETC  '&R4'(1,8)
&R5L     SETC  '&R5'(1,8)
&R6L     SETC  '&R6'(1,8)
&R7L     SETC  '&R7'(1,8)
&R8L     SETC  '&R8'(1,8)
&R9L     SETC  '&R9'(1,8)
&R10L    SETC  '&R10'(1,8)
&R11L    SETC  '&R11'(1,8)
&R12L    SETC  '&R12'(1,8)
&R13L    SETC  '&R13'(1,8)
&R14L    SETC  '&R14'(1,8)
&R15L    SETC  '&R15'(1,8)
         AIF   (&BASE NE 12).N12
&R12L    SETC '&RB'(1,8)
         AGO   .EQUS
.N12     AIF   (&BASE NE  2).N2
&R2L     SETC '&RB'(1,8)
         AGO   .EQUS
.N2      AIF   (&BASE NE  3).N3
&R3L     SETC '&RB'(1,8)
         AGO   .EQUS
.N3      AIF   (&BASE NE  4).N4
&R4L     SETC '&RB'(1,8)
         AGO   .EQUS
.N4      AIF   (&BASE NE  5).N5
&R5L     SETC '&RB'(1,8)
         AGO   .EQUS
.N5      AIF   (&BASE NE  6).N6
&R6L     SETC '&RB'(1,8)
         AGO   .EQUS
.N6      AIF   (&BASE NE  7).N7
&R7L     SETC '&RB'(1,8)
         AGO   .EQUS
.N7      AIF   (&BASE NE  8).N8
&R8L     SETC '&RB'(1,8)
         AGO   .EQUS
.N8      AIF   (&BASE NE  9).N9
&R9L     SETC '&RB'(1,8)
         AGO   .EQUS
.N9      AIF   (&BASE NE 10).N10
&R10L    SETC '&RB'(1,8)
         AGO   .EQUS
.N10     AIF   (&BASE NE 11).N11
&R11L    SETC '&RB'(1,8)
         AGO   .EQUS
.N11     AIF   (&BASE NE 13).N13
&R13L    SETC '&RB'(1,8)
         AGO   .EQUS
.N13     AIF   (&BASE NE 14).N14
&R14L    SETC '&RB'(1,8)
         AGO   .EQUS
.N14     AIF   (&BASE NE 15).N15
&R15L    SETC '&RB'(1,8)
         AGO   .EQUS
.N15     AIF   (&BASE NE  0).N0
&R0L     SETC '&RB'(1,8)
         AGO   .EQUS
.N0      AIF   (&BASE NE  1).EQUS
&R1L     SETC '&RB'(1,8)
.EQUS    ANOP
&R0L     EQU   0
&R1L     EQU   1
&R2L     EQU   2
&R3L     EQU   3
&R4L     EQU   4
&R5L     EQU   5
&R6L     EQU   6
&R7L     EQU   7
&R8L     EQU   8
&R9L     EQU   9
&R10L    EQU   10
&R11L    EQU   11
&R12L    EQU   12
&R13L    EQU   13
&R14L    EQU   14
&R15L    EQU   15
.NOEQU   ANOP
         MEND
./ ADD NAME=SETMODE  0100-03278-03278-0044-00022-00022-00000-AFIELD
         MACRO
&LABEL   SETMODE &AM
.******************************************************************
.* MACRO TO CHANGE ADDRESSING MODE FROM 31 BIT TO 24 BIT AND BACK *
.* AGAIN. SEE SPL 31 BIT ADDRESSING.                              *
.******************************************************************
         AIF   ('&AM' NE '').OK
         MNOTE 5,'MISSING OPERAND - 24 OR 31 MUST BE SPECIFIED'
         MEXIT
.OK      AIF   ('&LABEL' EQ '').B1
&LABEL   EQU   *
.B1      ANOP
         AIF   ('&AM' EQ '31').AM31
         LA    15,*+6                RESET TO 24-BIT
         BSM   0,15                  ADDRESSING MODE
         AGO   .END
.AM31    ANOP
         LA    15,*+10               ADDRESS PAST THE BSM
         O     15,=A(X'80000000')    INDICATE &
         BSM   0,15                  GET INTO 31-BIT ADDRESSING MODE
.END     ANOP
         MEND
